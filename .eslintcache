[{"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\index.js":"1","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\App.js":"2","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\pages\\pos\\index.js":"3","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\request\\Sales.js":"4","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\request\\CropfieldItem.js":"5","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\request\\ErrorReq.js":"6","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\pages\\tractor\\index.js":"7","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\pages\\list\\index.js":"8","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\pages\\item\\index.js":"9","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\Constants.js":"10","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\request\\AxiosDefault.js":"11","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\request\\Tractors.js":"12","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\components\\CustomModal\\index.js":"13","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\reportWebVitals.js":"14"},{"size":607,"mtime":1636036849000,"results":"15","hashOfConfig":"16"},{"size":1676,"mtime":1636036849000,"results":"17","hashOfConfig":"16"},{"size":16317,"mtime":1636031326235,"results":"18","hashOfConfig":"16"},{"size":527,"mtime":1635913371807,"results":"19","hashOfConfig":"16"},{"size":864,"mtime":1635860453307,"results":"20","hashOfConfig":"16"},{"size":868,"mtime":1635823606941,"results":"21","hashOfConfig":"16"},{"size":7089,"mtime":1635873449135,"results":"22","hashOfConfig":"16"},{"size":5082,"mtime":1636049529268,"results":"23","hashOfConfig":"16"},{"size":5860,"mtime":1635923584723,"results":"24","hashOfConfig":"16"},{"size":91,"mtime":1635823606940,"results":"25","hashOfConfig":"16"},{"size":418,"mtime":1635823606940,"results":"26","hashOfConfig":"16"},{"size":750,"mtime":1635871335305,"results":"27","hashOfConfig":"16"},{"size":1356,"mtime":1636036849000,"results":"28","hashOfConfig":"16"},{"size":375,"mtime":1635823606939,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"15so09t",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\index.js",[],["62","63"],"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\App.js",["64","65","66","67"],"import React from \"react\";\r\nimport { Container, Row, Col, Nav, NavItem, NavLink } from \"reactstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSignOutAlt, faBell } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"./App.css\";\r\nimport POS from \"./pages/pos/\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Container fluid={true}>\r\n            <Row>\r\n              <Col sm=\"2\" className=\"text-center header-col-brand\">\r\n                Agri app\r\n              </Col>\r\n              <Col sm=\"10\" className=\"header-col-nav\">\r\n                <Nav className=\" ml-auto\">\r\n                  <NavItem>\r\n                    <div className=\"profile\">\r\n                      <div className=\"name\">Niyog Job</div>\r\n                      \r\n                    </div>\r\n                  </NavItem>\r\n                  \r\n                </Nav>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </header>\r\n        <main className=\"main-app\">\r\n          <Container className=\"container-main\" fluid>\r\n            <POS />\r\n          </Container>\r\n        </main>\r\n      </div>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={3000}\r\n        hideProgressBar={false}\r\n        newestOnTop={true}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\pages\\pos\\index.js",["68","69"],"import React from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  InputGroup,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Table,\r\n  Button,\r\n  ButtonGroup,\r\n  ListGroup,\r\n  ListGroupItem,\r\n} from \"reactstrap\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport Tractor from \"../tractor\";\r\nimport Item from \"../item\";\r\nimport List from \"../list\";\r\n\r\nimport CropfieldItemAPI from \"../../services/request/CropfieldItem\";\r\nimport SalesAPI from \"../../services/request/Sales\";\r\n\r\nimport ToastError from \"../../services/request/ErrorReq\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCartPlus,\r\n  faEdit,\r\n  faSync,\r\n  faTimes,\r\n  faTrash,\r\n  faUser,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CustomCalender = ({ value, onClick }) => (\r\n  <Button color=\"success\" onClick={onClick}>\r\n    {value}\r\n  </Button>\r\n);\r\n\r\nconst format_mysql_date = (d) => {\r\n  let month = \"\" + (d.getMonth() + 1);\r\n  let day = \"\" + d.getDate();\r\n  let year = d.getFullYear();\r\n\r\n  if (month.length < 2) month = \"0\" + month;\r\n  if (day.length < 2) day = \"0\" + day;\r\n\r\n  return [year, month, day].join(\"-\");\r\n};\r\n\r\nclass POS extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      new_item: true,\r\n      cart: {\r\n        tractor_id: 0,\r\n        \r\n        date_display: new Date(),\r\n        list_cart: [],\r\n        process_date: format_mysql_date(new Date()),\r\n        process_area: 0,\r\n        tractor_name: \"\",\r\n        field_name:\"\",\r\n        crop_totalarea:0,\r\n        culture_name:\"\",\r\n\r\n      },\r\n      list_item: [],\r\n      editItem: {},\r\n      search_item_keyword: \"\",\r\n      refresh_animation: false,\r\n    };\r\n  }\r\n\r\n  cancelTransaction = () => {\r\n    let y = window.confirm(\"Cancel Transaction ?\");\r\n    y && this.resetObject();\r\n  };\r\n\r\n  refreshItem() {\r\n    this.setState({ refresh_animation: true });\r\n    CropfieldItemAPI.cropfielditemList()\r\n      .then((result) => {\r\n        this.setState({\r\n          list_item: result.data.data,\r\n          refresh_animation: false,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        ToastError(err);\r\n        this.setState({ refresh_animation: false });\r\n      });\r\n  }\r\n\r\n  newTractor = () => {\r\n    this.props.history.push(\"/tractors\");\r\n  };\r\n\r\n  listSales = () => {\r\n    this.props.history.push(\"/processfield\");\r\n  };\r\n \r\n\r\n  newItem = () => {\r\n    this.setState({ new_item: true, editItem: {} });\r\n    this.props.history.push(\"/cropfielditem\");\r\n  };\r\n\r\n  editItem = (index) => {\r\n    this.setState({ new_item: false, editItem: this.state.list_item[index] });\r\n    this.props.history.push(\"/cropfielditem\");\r\n  };\r\n\r\n  deleteItem = (index) => {\r\n    let detail = this.state.list_item[index];\r\n    let del = window.confirm(\"Delete item : \" + detail.item_name + \" ?\");\r\n    if (del) {\r\n      CropfieldItemAPI.cropfielditemDelete({ cropfield_name: detail.cropfield_name })\r\n        .then((result) => {\r\n          toast.success(result.data.message);\r\n          this.refreshItem();\r\n        })\r\n        .catch((err) => {\r\n          ToastError(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  addCart = (index) => {\r\n    let listCart = this.state.cart.list_cart;\r\n    let newItem = this.state.list_item[index];\r\n    index = listCart.findIndex((x) => x.item_id === newItem.cropfield_name);\r\n    if (index < 0) {\r\n      listCart.push({\r\n        \r\n        item_qty: 1,\r\n        crop_totalarea: newItem.crop_totalarea,\r\n        field_name: newItem.cropfield_name,\r\n        culture_name:newItem.crop_name\r\n        \r\n      });\r\n    } else {\r\n      listCart[index].item_qty += 1;\r\n      listCart[index].item_subtotal =\r\n        parseFloat(newItem.item_price) * parseFloat(listCart[index].item_qty);\r\n    }\r\n    this.setState({ cart: { ...this.state.cart, list_cart: listCart } });\r\n  };\r\n  handleDecQty = (index) => {\r\n    let listCart = this.state.cart.list_cart;\r\n    if (listCart[index].item_qty === 1) {\r\n      return;\r\n    }\r\n    listCart[index].item_qty -= 1;\r\n    listCart[index].item_subtotal =\r\n      parseFloat(listCart[index].item_price) *\r\n      parseFloat(listCart[index].item_qty);\r\n    this.setState({ cart: { ...this.state.cart, list_cart: listCart } });\r\n  };\r\n  handleIncQty = (index) => {\r\n    let listCart = this.state.cart.list_cart;\r\n    listCart[index].item_qty += 1;\r\n    listCart[index].item_subtotal =\r\n      parseFloat(listCart[index].item_price) *\r\n      parseFloat(listCart[index].item_qty);\r\n    this.setState({ cart: { ...this.state.cart, list_cart: listCart } });\r\n  };\r\n  deleteCart = (index) => {\r\n    let listCart = this.state.cart.list_cart;\r\n    listCart.splice(index, 1);\r\n    this.setState({ cart: { ...this.state.cart, list_cart: listCart } });\r\n  };\r\n  resetObject() {\r\n    this.setState({\r\n      cart: {\r\n        tractor_id: 0,\r\n        \r\n        date_display: new Date(),\r\n        list_cart: [],\r\n        process_date: format_mysql_date(new Date()),\r\n        process_area: 0,\r\n        tractor_name: \"\",\r\n        field_name:\"\",\r\n        crop_totalarea:0,\r\n        culture_name:\"\",\r\n\r\n      },\r\n      list_item: [],\r\n      editItem: {},\r\n      search_item_keyword: \"\",\r\n      refresh_animation: false,\r\n    });\r\n  }\r\n  payTransaction = (obj) => {\r\n    let cart = this.state.cart;\r\n    if (cart.tractor_id === 0) {\r\n      toast.error(\"Please choose tractor before save\");\r\n      this.newTractor();\r\n      return;\r\n    }\r\n    if (cart.list_cart.length <= 0) {\r\n      toast.error(\"The fields are empty to process\");\r\n      return;\r\n    }\r\n    let y = window.confirm(\"Process fields?\");\r\n    if (y) {\r\n      SalesAPI.salesAdd(this.state.cart)\r\n        .then((result) => {\r\n          this.resetObject();\r\n          toast.success(result.data.message);\r\n        })\r\n        .catch((err) => {\r\n          ToastError(err);\r\n        });\r\n    }\r\n  };\r\n  setTractor = (id, custname) => {\r\n    this.setState({\r\n      cart: {\r\n        ...this.state.cart,\r\n        tractor_id: id,\r\n        tractor_name: custname,\r\n      },\r\n    });\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  componentDidUpdate() {}\r\n  componentDidMount() {\r\n    this.refreshItem();\r\n  }\r\n\r\n  render() {\r\n    const itemlist = this.state.list_item;\r\n    const searchword = this.state.search_item_keyword;\r\n    const listCart = this.state.cart.list_cart;\r\n    \r\n    this.state.cart.list_cart.forEach((obj) => {\r\n      \r\n    });\r\n    \r\n\r\n    return (\r\n      <>\r\n        <Row className=\"main-pos\">\r\n          <Col sm={4}>\r\n            <Col className=\"main-pos-left\" sm={12}>\r\n              <div className=\"container-header\">\r\n                <div className=\"container-header-1\">\r\n                  <InputGroup>\r\n                    <DatePicker\r\n                      dateFormat=\"dd/MM/yyyy\"\r\n                      selected={this.state.cart.date_display}\r\n                      onChange={(date) =>\r\n                        this.setState({\r\n                          cart: {\r\n                            ...this.state.cart,\r\n                            date_display: date,\r\n                            process_date: format_mysql_date(date),\r\n                          },\r\n                        })\r\n                      }\r\n                      customInput={<CustomCalender />}\r\n                    />\r\n\r\n                    <InputGroupAddon addonType=\"append\">\r\n                      <InputGroupText>\r\n                        <FontAwesomeIcon icon={faUser} />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                  </InputGroup>\r\n                </div>\r\n                <div className=\"container-header-2\">\r\n                  <Button color=\"info\" onClick={this.newTractor} block>\r\n                    {this.state.cart.tractor_id === 0\r\n                      ? \"+ Add Tractor\"\r\n                      : this.state.cart.tractor_name}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n              <div className=\"container-cart\">\r\n                <div className=\"container-cart-list\">\r\n                  <ListGroup flush>\r\n                    {listCart.map((obj, index) => {\r\n                      return (\r\n                        <ListGroupItem key={index.toString()}>\r\n                          <div className=\"cart-name\">\r\n                            <div>{obj.field_name}</div>\r\n                          </div>\r\n                          <div className=\"cart-detail\">\r\n                            <div className=\"cart-1\">\r\n                            Input the processed field<Input\r\n                          type=\"number\"\r\n                          placeholder=\"0\"\r\n                         \r\n                         \r\n                          size=\"md\"\r\n                          \r\n                          \r\n                          \r\n                          onChange={(event) => {\r\n                            const { target } = event;\r\n                            \r\n                            listCart[index].process_area = target.value;\r\n                            this.setState({\r\n                              cart: {\r\n                                ...this.state.cart,\r\n                                list_cart: listCart,\r\n                              },\r\n                            });\r\n                          }}\r\n                          \r\n                          \r\n                        />\r\n                              {\"  \"}\r\n                              Total area:\r\n                              {obj.crop_totalarea}\r\n                              {\"  \"}\r\n                              \r\n                              \r\n                            </div>\r\n\r\n                            \r\n                            <div className=\"cart-3\">\r\n                              <FontAwesomeIcon\r\n                                className=\"text-danger pointer-hand\"\r\n                                title=\"Delete item from cart\"\r\n                                icon={faTimes}\r\n                                onClick={() => {\r\n                                  this.deleteCart(index);\r\n                                }}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        </ListGroupItem>\r\n                      );\r\n                    })}\r\n                  </ListGroup>\r\n                </div>\r\n                <div className=\"container-cart-recap\">\r\n                  \r\n                \r\n                  \r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Col>\r\n          <Col sm={8}>\r\n            <Col className=\"main-pos-right\" sm={12}>\r\n              <div className=\"mb-3\">\r\n                <InputGroup size=\"sm\">\r\n                  <Input\r\n                    onChange={(event) => {\r\n                      const { target } = event;\r\n                      this.setState({ search_item_keyword: target.value });\r\n                    }}\r\n                    placeholder=\"SEARCH CROP FIELD...\"\r\n                  />\r\n                  <InputGroupAddon addonType=\"append\">\r\n                    <ButtonGroup title=\"Refresh item list\" size=\"sm\">\r\n                      <Button\r\n                        color=\"warning\"\r\n                        onClick={() => {\r\n                          this.refreshItem();\r\n                        }}\r\n                      >\r\n                        <FontAwesomeIcon\r\n                          spin={this.state.refresh_animation}\r\n                          icon={faSync}\r\n                        />\r\n                      </Button>\r\n                      <Button color=\"primary\" onClick={this.newItem}>\r\n                        {\" \"}\r\n                        ADD CROP FIELD\r\n                      </Button>\r\n                    </ButtonGroup>\r\n                  </InputGroupAddon>\r\n                </InputGroup>\r\n              </div>\r\n              <div>\r\n                <Table responsive hover borderless>\r\n                  <thead className=\"table-active\">\r\n                    <tr>\r\n                      <th>Cropfield name</th>\r\n                      <th>Crop name</th>\r\n                      <th className=\"text-right\">Total area</th>\r\n                      <th className=\"text-right\">Unprocessed area</th>\r\n                      <th></th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {\r\n                      itemlist\r\n                      .filter((itm) =>\r\n                        itm.cropfield_name\r\n                          .toUpperCase()\r\n                          .includes(searchword.toUpperCase())\r\n                      )\r\n                      .map((obj, index) => {\r\n                        return (\r\n                          <tr key={index.toString()}>\r\n                            <td>{obj.cropfield_name}</td>\r\n                            <td>{obj.crop_name}</td>\r\n                            <td className=\"text-right\">{obj.crop_totalarea}</td>\r\n                            <td className=\"text-right\">{obj.crop_processedarea}</td>\r\n                            <td className=\"text-center\">\r\n                              <ButtonGroup size=\"sm\">\r\n                                <Button\r\n                                  onClick={() => {\r\n                                    this.addCart(index);\r\n                                  }}\r\n                                  title=\"Add to process\"\r\n                                  color=\"success\"\r\n                                >\r\n                                   + Add to process field\r\n                                </Button>\r\n                                <Button\r\n                                  title=\"Edit master item\"\r\n                                  color=\"warning\"\r\n                                  onClick={() => {\r\n                                    this.editItem(index);\r\n                                  }}\r\n                                >\r\n                                  <FontAwesomeIcon icon={faEdit} /> Edit\r\n                                </Button>\r\n                                <Button\r\n                                  title=\"Delete item\"\r\n                                  onClick={() => {\r\n                                    this.deleteItem(index);\r\n                                  }}\r\n                                  color=\"danger\"\r\n                                >\r\n                                  <FontAwesomeIcon icon={faTrash} /> Delete\r\n                                </Button>\r\n                              </ButtonGroup>\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                  </tbody>\r\n                </Table>\r\n              </div>\r\n              <div>\r\n                <Button\r\n                  onClick={this.payTransaction}\r\n                  color=\"success\"\r\n                  className=\"mr-1\"\r\n                >\r\n                  Process added fields..\r\n                </Button>\r\n                \r\n                <Button onClick={this.listSales} color=\"info\">\r\n                  Report\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\" />\r\n          <Route\r\n            path=\"/tractors\"\r\n            render={() => (\r\n              <Tractor\r\n                new={this.state.new_tractor}\r\n                callbackRequest={(id, custname) => {\r\n                  this.setTractor(id, custname);\r\n                }}\r\n                tractorDetail={this.state.editTractor}\r\n              />\r\n            )}\r\n          />\r\n          <Route path=\"/processfield\">\r\n            <List />\r\n          </Route>\r\n          <Route\r\n            path=\"/cropfielditem\"\r\n            render={() => (\r\n              <Item\r\n                new={this.state.new_item}\r\n                refreshItem={() => {\r\n                  this.refreshItem();\r\n                }}\r\n                itemDetail={this.state.editItem}\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(POS);\r\n","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\request\\Sales.js",[],"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\request\\CropfieldItem.js",[],"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\request\\ErrorReq.js",[],"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\pages\\tractor\\index.js",[],"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\pages\\list\\index.js",["70","71","72","73","74","75","76","77"],"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\pages\\item\\index.js",["78","79","80","81","82","83","84","85","86","87","88","89"],"import React from \"react\";\r\n\r\nimport {\r\n  Row,\r\n  \r\n  InputGroup,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Table,\r\n  Button,\r\n  ButtonGroup,\r\n  ListGroup,\r\n  ListGroupItem,\r\n} from \"reactstrap\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./index.css\";\r\nimport CustomModal from \"../../components/CustomModal\";\r\nimport {\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  \r\n  \r\n  FormFeedback,\r\n} from \"reactstrap\";\r\n\r\nimport CropfieldItemAPI from \"../../services/request/CropfieldItem\";\r\nimport { toast } from \"react-toastify\";\r\nimport ToastError from \"../../services/request/ErrorReq\";\r\n\r\nconst item_validation_default = {\r\n  item_name_invalid: false,\r\n  item_package_invalid: false,\r\n};\r\n\r\nconst item_default = {\r\n  cropfield_name: \"\",\r\n  crop_name: \"\",\r\n  crop_totalarea: 0,\r\n  crop_processedarea: 0,\r\n  \r\n};\r\n\r\nclass Item extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: props.new ? item_default : props.itemDetail,\r\n      item_validation: item_validation_default,\r\n      is_new: props.new,\r\n      in_proses: false,\r\n    };\r\n  }\r\n  componentDidUpdate() {}\r\n  componentDidMount() {}\r\n  saveItem = () => {\r\n    let req = this.state.item;\r\n    if (req.item_name === \"\") {\r\n      this.setState({\r\n        item_validation: {\r\n          ...this.state.item_validation,\r\n          item_name_invalid: true,\r\n        },\r\n      });\r\n      this.itemRef.focus();\r\n      return;\r\n    }\r\n    if (req.item_package === \"\") {\r\n      this.setState({\r\n        item_validation: {\r\n          ...this.state.item_validation,\r\n          item_package_invalid: true,\r\n        },\r\n      });\r\n      this.packageRef.focus();\r\n      return;\r\n    }\r\n    this.state.is_new ? this.saveNewItem() : this.editItem();\r\n  };\r\n  saveNewItem() {\r\n    CropfieldItemAPI.cropfielditemAdd(this.state.item)\r\n      .then((result) => {\r\n        toast.success(result.data.message);\r\n        this.setState({ item: item_default });\r\n        this.itemRef.focus();\r\n        this.props.refreshItem();\r\n      })\r\n      .catch((err) => {\r\n        ToastError(err);\r\n        \r\n      });\r\n  }\r\n  editItem() {\r\n    CropfieldItemAPI.cropfielditemEdit(this.state.item)\r\n      .then((result) => {\r\n        toast.success(result.data.message);\r\n        this.itemRef.focus();\r\n        this.props.refreshItem();\r\n      })\r\n      .catch((err) => {\r\n        ToastError(err);\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <CustomModal title={this.state.is_new ? \"New Item\" : \"Edit Item\"}>\r\n        <Form>\r\n          <FormGroup row>\r\n            <Label sm={2}>Crop field name</Label>\r\n            <Col sm={6}>\r\n              <Input\r\n                invalid={this.state.item_validation.item_name_invalid}\r\n                autoFocus\r\n                innerRef={(ref) => {\r\n                  this.itemRef = ref;\r\n                }}\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                name=\"cropfield_name\"\r\n                value={this.state.item.cropfield_name}\r\n                placeholder=\"Crop field name\"\r\n                onChange={(event) => {\r\n                  const { target } = event;\r\n                  this.setState({\r\n                    item: {\r\n                      ...this.state.item,\r\n                      cropfield_name: target.value,\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n              <FormFeedback tooltip>Crop field is required</FormFeedback>\r\n            </Col>\r\n          </FormGroup>\r\n          <FormGroup row>\r\n          <Label sm={2}>Crop name</Label>\r\n            <Col sm={6}>\r\n              <Input\r\n                invalid={this.state.item_validation.item_name_invalid}\r\n                autoFocus\r\n                innerRef={(ref) => {\r\n                  this.itemRef = ref;\r\n                }}\r\n                size=\"sm\"\r\n                type=\"text\"\r\n                name=\"cropfield_name\"\r\n                value={this.state.item.crop_name}\r\n                placeholder=\"Crop name\"\r\n                onChange={(event) => {\r\n                  const { target } = event;\r\n                  this.setState({\r\n                    item: {\r\n                      ...this.state.item,\r\n                      crop_name: target.value,\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n              <FormFeedback tooltip>Crop name is required</FormFeedback>\r\n            </Col>\r\n          </FormGroup>\r\n          <FormGroup row>\r\n            <Label sm={2}>Total crop area</Label>\r\n            <Col sm={6}>\r\n              <NumberFormat\r\n                className=\"form-control-sm form-control\"\r\n                placeholder=\"0\"\r\n                type=\"text\"\r\n                name=\"crop_totalarea\"\r\n                value={this.state.item.crop_totalarea}\r\n                thousandSeparator={true}\r\n                inputmode=\"numeric\"\r\n                \r\n                onValueChange={(values) => {\r\n                  const { value } = values;\r\n                  this.setState({\r\n                    item: {\r\n                      ...this.state.item,\r\n                      crop_totalarea: value,\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n            </Col>\r\n          </FormGroup>\r\n          \r\n          <FormGroup row>\r\n            <Label sm={2}></Label>\r\n            <Col sm={6}>\r\n              <Button color=\"primary\" onClick={this.saveItem} title=\"Save Item\">\r\n                {this.props.new ? \"Save Item\" : \"Edit Item\"}\r\n              </Button>\r\n            </Col>\r\n          </FormGroup>\r\n        </Form>\r\n      </CustomModal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Item;\r\n","C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\Constants.js",[],"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\request\\AxiosDefault.js",[],"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\services\\request\\Tractors.js",[],"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\components\\CustomModal\\index.js",[],"C:\\Users\\Niyog\\Desktop\\project_trail\\agri-project-frontend-react-main\\src\\reportWebVitals.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":2,"column":45,"nodeType":"96","messageId":"97","endLine":2,"endColumn":52},{"ruleId":"94","severity":1,"message":"98","line":3,"column":10,"nodeType":"96","messageId":"97","endLine":3,"endColumn":25},{"ruleId":"94","severity":1,"message":"99","line":4,"column":10,"nodeType":"96","messageId":"97","endLine":4,"endColumn":22},{"ruleId":"94","severity":1,"message":"100","line":4,"column":24,"nodeType":"96","messageId":"97","endLine":4,"endColumn":30},{"ruleId":"94","severity":1,"message":"101","line":18,"column":8,"nodeType":"96","messageId":"97","endLine":18,"endColumn":20},{"ruleId":"94","severity":1,"message":"102","line":33,"column":3,"nodeType":"96","messageId":"97","endLine":33,"endColumn":13},{"ruleId":"94","severity":1,"message":"101","line":10,"column":8,"nodeType":"96","messageId":"97","endLine":10,"endColumn":20},{"ruleId":"94","severity":1,"message":"103","line":12,"column":3,"nodeType":"96","messageId":"97","endLine":12,"endColumn":6},{"ruleId":"94","severity":1,"message":"104","line":13,"column":3,"nodeType":"96","messageId":"97","endLine":13,"endColumn":6},{"ruleId":"94","severity":1,"message":"105","line":14,"column":3,"nodeType":"96","messageId":"97","endLine":14,"endColumn":13},{"ruleId":"94","severity":1,"message":"106","line":16,"column":3,"nodeType":"96","messageId":"97","endLine":16,"endColumn":18},{"ruleId":"94","severity":1,"message":"107","line":17,"column":3,"nodeType":"96","messageId":"97","endLine":17,"endColumn":17},{"ruleId":"94","severity":1,"message":"108","line":20,"column":3,"nodeType":"96","messageId":"97","endLine":20,"endColumn":12},{"ruleId":"94","severity":1,"message":"109","line":21,"column":3,"nodeType":"96","messageId":"97","endLine":21,"endColumn":16},{"ruleId":"94","severity":1,"message":"103","line":4,"column":3,"nodeType":"96","messageId":"97","endLine":4,"endColumn":6},{"ruleId":"94","severity":1,"message":"105","line":6,"column":3,"nodeType":"96","messageId":"97","endLine":6,"endColumn":13},{"ruleId":"94","severity":1,"message":"106","line":8,"column":3,"nodeType":"96","messageId":"97","endLine":8,"endColumn":18},{"ruleId":"94","severity":1,"message":"107","line":9,"column":3,"nodeType":"96","messageId":"97","endLine":9,"endColumn":17},{"ruleId":"94","severity":1,"message":"110","line":10,"column":3,"nodeType":"96","messageId":"97","endLine":10,"endColumn":8},{"ruleId":"94","severity":1,"message":"111","line":12,"column":3,"nodeType":"96","messageId":"97","endLine":12,"endColumn":14},{"ruleId":"94","severity":1,"message":"108","line":13,"column":3,"nodeType":"96","messageId":"97","endLine":13,"endColumn":12},{"ruleId":"94","severity":1,"message":"109","line":14,"column":3,"nodeType":"96","messageId":"97","endLine":14,"endColumn":16},{"ruleId":"94","severity":1,"message":"112","line":16,"column":10,"nodeType":"96","messageId":"97","endLine":16,"endColumn":16},{"ruleId":"94","severity":1,"message":"113","line":16,"column":18,"nodeType":"96","messageId":"97","endLine":16,"endColumn":23},{"ruleId":"94","severity":1,"message":"114","line":17,"column":10,"nodeType":"96","messageId":"97","endLine":17,"endColumn":20},{"ruleId":"94","severity":1,"message":"115","line":20,"column":8,"nodeType":"96","messageId":"97","endLine":20,"endColumn":18},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","'FontAwesomeIcon' is defined but never used.","'faSignOutAlt' is defined but never used.","'faBell' is defined but never used.","'NumberFormat' is defined but never used.","'faCartPlus' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'InputGroup' is defined but never used.","'InputGroupAddon' is defined but never used.","'InputGroupText' is defined but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.","'Table' is defined but never used.","'ButtonGroup' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'withRouter' is defined but never used.","'DatePicker' is defined but never used.","no-global-assign","no-unsafe-negation"]